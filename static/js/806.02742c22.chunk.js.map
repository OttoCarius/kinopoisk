{"version":3,"file":"static/js/806.02742c22.chunk.js","mappings":"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","sources":["components/Genres/genresInfo.js","components/Genres/GenerateGenres.js","components/CardFilm/CardFilm.styled.js","components/CardFilm/CardFilm.js","components/FilmList/FilmList.styled.js","components/FilmList/FilmList.js","pages/HomePage/HomePage.js","services/Api.js"],"sourcesContent":["export const genresInfo = [\n  { id: 28, name: 'Action' },\n  { id: 12, name: 'Adventure' },\n  { id: 16, name: 'Animation' },\n  { id: 35, name: 'Comedy' },\n  { id: 80, name: 'Crime' },\n  { id: 99, name: 'Documentary' },\n  { id: 18, name: 'Drama' },\n  { id: 10751, name: 'Family' },\n  { id: 14, name: 'Fantasy' },\n  { id: 36, name: 'History' },\n  { id: 27, name: 'Horror' },\n  { id: 10402, name: 'Music' },\n  { id: 9648, name: 'Mystery' },\n  { id: 10749, name: 'Romance' },\n  { id: 878, name: 'Science Fiction' },\n  { id: 10770, name: 'TV Movie' },\n  { id: 53, name: 'Thriller' },\n  { id: 10752, name: 'War' },\n  { id: 37, name: 'Western' },\n];\n","import { genresInfo } from './genresInfo';\nimport styled from 'styled-components';\n\nexport const GenerateGenres = genresId => {\n  const id = Object.values(genresId);\n  const listGenres = [];\n\n  genresInfo.forEach(el => {\n    if (id[0].includes(el.id)) {\n      listGenres.push(el.name);\n    }\n  });\n  return <Genres>{listGenres.slice(0, 2).join(', ') + ', Other'}</Genres>;\n};\n\nconst Genres = styled.span`\n  color: #ff6b01;\n`;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const ItemLink = styled(Link)`\n  text-decoration: none;\n  color: #fff;\n`;\n\nexport const Item = styled.li`\n  overflow: hidden;\n  border-radius: 16px;\n  box-shadow: 0px 0px 5px 0px rgba(255, 255, 255, 0.75);\n  background-color: #00151a;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  :focus {\n    color: #33ffff;\n    box-shadow: 0 0 15px #33ffff, 0 0 15px #33ffff, 0 0 15px #33ffff,\n      0 0 25px #33ffff, 0 0 35px #33ffff;\n\n    opacity: 0.8;\n\n    transition: 0.5s;\n    transform: scale(1.02);\n  }\n\n  @media screen and (max-width: 480px) {\n    width: 100%;\n  }\n`;\n\nexport const Title = styled.p`\n  color: white;\n  font-family: Georgia, serif;\n  font-size: 22px;\n  letter-spacing: 0.8px;\n  word-spacing: 3.2px;\n\n  font-weight: 700;\n  text-decoration: none solid rgb(68, 68, 68);\n  font-style: italic;\n  font-variant: normal;\n  text-transform: capitalize;\n\n  &:hover,\n  &:focus {\n    color: #003333;\n\n    opacity: 0.8;\n\n    transition: 0.3s;\n  }\n`;\nexport const MetaWrapper = styled.div`\n  padding: 10px;\n`;\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n`;\n","import { GenerateGenres } from '../Genres/GenerateGenres';\nimport { Item, Title, MetaWrapper, Image } from './CardFilm.styled';\nimport PropTypes from 'prop-types';\n\nconst CardFilm = ({ itemData }) => {\n  const { poster_path, title, genre_ids } = itemData;\n  return (\n    <>\n      <Item>\n        <Image\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500${poster_path}`\n              : `https://upload.wikimedia.org/wikipedia/commons/f/fc/No_picture_available.png`\n          }\n          alt=\"\"\n        />\n        <MetaWrapper>\n          <Title>{title}</Title>\n          <GenerateGenres genresId={genre_ids} />\n        </MetaWrapper>\n      </Item>\n    </>\n  );\n};\n\nexport default CardFilm;\n\nCardFilm.propTypes = {\n  itemData: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 1em;\n  list-style: none;\n  @media screen and (max-width: 480px) {\n    grid-template-columns: repeat(1, 1fr);\n    justify-items: center;\n  }\n`;\n","import CardFilm from '../CardFilm/CardFilm';\nimport { List } from './FilmList.styled';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { ItemLink } from '../CardFilm/CardFilm.styled';\n\nconst FilmList = ({ data }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {data.map(el => (\n        <ItemLink\n          to={`/movies/${el.id}`}\n          state={{ from: location }}\n          key={el.id}\n        >\n          <CardFilm itemData={el} />\n        </ItemLink>\n      ))}\n    </List>\n  );\n};\n\nexport default FilmList;\n\nFilmList.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport FilmList from '../../components/FilmList/FilmList';\nimport * as FilmsAPI from '../../services/Api';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nconst HomePage = () => {\n  const [films, setFilms] = useState([]);\n\n  useEffect(() => {\n    FilmsAPI.fetchPopularFilms()\n      .then(data => {\n        Loading.circle({\n          svgColor: '#ff6b01',\n        });\n        setFilms(data);\n      })\n      .finally(() => {\n        Loading.remove();\n      });\n  }, []);\n\n  return <FilmList data={films} />;\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst API_KEY = '8b9b90eab4f34348a4bd4775afa7ecfd';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Фетч трендов\nexport async function fetchPopularFilms() {\n  const response = await axios.get(\n    `/movie/popular?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n}\n\n//  Фетч по поиску по имени\n\nexport async function fetchSearchFilmByName(filmName) {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${filmName}&page=1&include_adult=false`\n  );\n  return response.data.results;\n}\n\n// Фетч фильма по id\nexport async function fetchFilmInfo(movie_id) {\n  const response = await axios.get(\n    `/movie/${movie_id}?api_key=8b9b90eab4f34348a4bd4775afa7ecfd&language=en-US`\n  );\n  return response.data;\n}\n\n// Фетч отзывов на фильм\nexport async function fetchMovieReviews(movie_id) {\n  const response = await axios.get(\n    `/movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data.results;\n}\n\nexport async function fetchMovieCast(movie_id) {\n  const response = await axios.get(\n    `/movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data.cast;\n}\n"],"names":["genresInfo","id","name","GenerateGenres","genresId","Object","values","listGenres","forEach","el","includes","push","Genres","slice","join","styled","ItemLink","Link","Item","Title","MetaWrapper","Image","itemData","poster_path","title","genre_ids","src","alt","List","data","location","useLocation","map","to","state","from","useState","films","setFilms","useEffect","FilmsAPI","then","Loading","svgColor","finally","API_KEY","fetchPopularFilms","axios","response","results","fetchSearchFilmByName","filmName","fetchFilmInfo","movie_id","fetchMovieReviews","fetchMovieCast","cast"],"sourceRoot":""}